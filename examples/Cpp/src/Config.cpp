// This file is auto-generated by Tabular v1.1.0, DO NOT EDIT!

#include "Config.h"
#include <stddef.h>

using namespace std;
#ifndef ASSERT
#define ASSERT assert
#endif


namespace config {

int GlobalDefine::ParseFrom(const Table& table, GlobalDefine* ptr) {
    ASSERT(ptr != nullptr);
    ptr->GoldExchangeTimeFactor1 = ParseField<float>(GetTableField(table, "GoldExchangeTimeFactor1"));
    ptr->GoldExchangeTimeFactor2 = ParseField<float>(GetTableField(table, "GoldExchangeTimeFactor2"));
    ptr->GoldExchangeTimeFactor3 = ParseField<float>(GetTableField(table, "GoldExchangeTimeFactor3"));
    ptr->GoldExchangeResource1Price = ParseField<int>(GetTableField(table, "GoldExchangeResource1Price"));
    ptr->GoldExchangeResource2Price = ParseField<int>(GetTableField(table, "GoldExchangeResource2Price"));
    ptr->GoldExchangeResource3Price = ParseField<int>(GetTableField(table, "GoldExchangeResource3Price"));
    ptr->GoldExchangeResource4Price = ParseField<int>(GetTableField(table, "GoldExchangeResource4Price"));
    ptr->FreeCompleteSeconds = ParseField<int>(GetTableField(table, "FreeCompleteSeconds"));
    ptr->CancelBuildReturnPercent = ParseField<int>(GetTableField(table, "CancelBuildReturnPercent"));
    ptr->EnableSearch = ParseField<bool>(GetTableField(table, "EnableSearch"));
    ptr->SpawnLevelLimit = ParseArrayField<int>(GetTableField(table, "SpawnLevelLimit"));
    ptr->FirstRechargeReward = ParseMapField<string,int>(GetTableField(table, "FirstRechargeReward"));
    ptr->VIPItemReward = ParseMapField<int,int>(GetTableField(table, "VIPItemReward"));
    return 0;
}

int ItemBoxDefine::ParseRow(const rapidcsv::Document& doc, int rowIndex, ItemBoxDefine* ptr) {
    ASSERT(ptr != nullptr);
    ptr->ID = GetCellByName<string>(doc, "ID", rowIndex);
    ptr->Total = GetCellByName<int32_t>(doc, "Total", rowIndex);
    ptr->Time = GetCellByName<int32_t>(doc, "Time", rowIndex);
    ptr->Repeat = GetCellByName<string>(doc, "Repeat", rowIndex);
    for (size_t col = 0; col < doc.GetColumnCount(); col++) {
        const string& name = stringPrintf("GoodsID[%d]", col);
        int idx = doc.GetColumnIdx(name);
        if (idx < 0) {
            break;
        }
        auto elem = GetCellByName<string>(doc, name, rowIndex);
        ptr->GoodsIDs.push_back(elem);
    }
    for (size_t col = 0; col < doc.GetColumnCount(); col++) {
        const string& name = stringPrintf("Num[%d]", col);
        int idx = doc.GetColumnIdx(name);
        if (idx < 0) {
            break;
        }
        auto elem = GetCellByName<int64_t>(doc, name, rowIndex);
        ptr->Nums.push_back(elem);
    }
    for (size_t col = 0; col < doc.GetColumnCount(); col++) {
        const string& name = stringPrintf("Probability[%d]", col);
        int idx = doc.GetColumnIdx(name);
        if (idx < 0) {
            break;
        }
        auto elem = GetCellByName<int32_t>(doc, name, rowIndex);
        ptr->Probabilitys.push_back(elem);
    }
    return 0;
}

int NewbieGuide::ParseRow(const rapidcsv::Document& doc, int rowIndex, NewbieGuide* ptr) {
    ASSERT(ptr != nullptr);
    ptr->Name = GetCellByName<string>(doc, "Name", rowIndex);
    ptr->Desc = GetCellByName<string>(doc, "Desc", rowIndex);
    ptr->Category = GetCellByName<int32_t>(doc, "Category", rowIndex);
    ptr->Target = GetCellByName<string>(doc, "Target", rowIndex);
    ptr->Accomplishment = ParseArrayField<int>(GetCellByName<string>(doc, "Accomplishment", rowIndex));
    ptr->RewardGoods = ParseMapField<string,int>(GetCellByName<string>(doc, "RewardGoods", rowIndex));
    return 0;
}

int SoldierDefine::ParseRow(const rapidcsv::Document& doc, int rowIndex, SoldierDefine* ptr) {
    ASSERT(ptr != nullptr);
    ptr->ID = GetCellByName<int32_t>(doc, "ID", rowIndex);
    ptr->Name = GetCellByName<string>(doc, "Name", rowIndex);
    ptr->Level = GetCellByName<int32_t>(doc, "Level", rowIndex);
    ptr->BuildingName = GetCellByName<string>(doc, "BuildingName", rowIndex);
    ptr->BuildingLevel = GetCellByName<int32_t>(doc, "BuildingLevel", rowIndex);
    ptr->RequireSpace = GetCellByName<int32_t>(doc, "RequireSpace", rowIndex);
    ptr->Volume = GetCellByName<int32_t>(doc, "Volume", rowIndex);
    ptr->UpgradeTime = GetCellByName<int32_t>(doc, "UpgradeTime", rowIndex);
    ptr->UpgradeRes = GetCellByName<string>(doc, "UpgradeRes", rowIndex);
    ptr->UpgradeCost = GetCellByName<int32_t>(doc, "UpgradeCost", rowIndex);
    ptr->ConsumeRes = GetCellByName<string>(doc, "ConsumeRes", rowIndex);
    ptr->ConsumeCost = GetCellByName<int32_t>(doc, "ConsumeCost", rowIndex);
    ptr->ConsumeTime = GetCellByName<int32_t>(doc, "ConsumeTime", rowIndex);
    ptr->Act = GetCellByName<int32_t>(doc, "Act", rowIndex);
    ptr->Hp = GetCellByName<int32_t>(doc, "Hp", rowIndex);
    ptr->BombLoad = GetCellByName<string>(doc, "BombLoad", rowIndex);
    ptr->AtkFrequency = GetCellByName<double>(doc, "AtkFrequency", rowIndex);
    ptr->AtkRange = GetCellByName<double>(doc, "AtkRange", rowIndex);
    ptr->MovingSpeed = GetCellByName<double>(doc, "MovingSpeed", rowIndex);
    ptr->EnableBurn = GetCellByName<string>(doc, "EnableBurn", rowIndex);
    return 0;
}


} // namespace config 
