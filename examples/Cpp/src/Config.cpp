// This file is auto-generated by Tabular v1.2.0, DO NOT EDIT!

#include "Config.h"
#include <cassert>
#include <utility>
#include <fmt/format.h>
#include "strconv.h"

using namespace std;

#ifndef ASSERT
#define ASSERT assert
#endif


namespace config {

int GlobalDefine::ParseFrom(const IDataFrame* table, GlobalDefine* ptr) {
    ASSERT(ptr != nullptr);
    ptr->GoldExchangeTimeFactor1 = parseTo<float>(table->GetKeyField("GoldExchangeTimeFactor1"));
    ptr->GoldExchangeTimeFactor2 = parseTo<float>(table->GetKeyField("GoldExchangeTimeFactor2"));
    ptr->GoldExchangeTimeFactor3 = parseTo<float>(table->GetKeyField("GoldExchangeTimeFactor3"));
    ptr->GoldExchangeResource1Price = parseTo<int>(table->GetKeyField("GoldExchangeResource1Price"));
    ptr->GoldExchangeResource2Price = parseTo<int>(table->GetKeyField("GoldExchangeResource2Price"));
    ptr->GoldExchangeResource3Price = parseTo<int>(table->GetKeyField("GoldExchangeResource3Price"));
    ptr->GoldExchangeResource4Price = parseTo<int>(table->GetKeyField("GoldExchangeResource4Price"));
    ptr->FreeCompleteSeconds = parseTo<int>(table->GetKeyField("FreeCompleteSeconds"));
    ptr->CancelBuildReturnPercent = parseTo<int>(table->GetKeyField("CancelBuildReturnPercent"));
    ptr->EnableSearch = parseTo<bool>(table->GetKeyField("EnableSearch"));
    ptr->SpawnLevelLimit = parseArray<int>(table->GetKeyField("SpawnLevelLimit"), TabDelim1);
    ptr->FirstRechargeReward = parseMap<string,int>(table->GetKeyField("FirstRechargeReward"), TabDelim1, TabDelim2);
    ptr->VIPItemReward = parseMap<int,int>(table->GetKeyField("VIPItemReward"), TabDelim1, TabDelim2);
    return 0;
}

int ItemBoxDefine::ParseRow(const IDataFrame* table, int rowIndex, ItemBoxDefine* ptr) {
    ASSERT(ptr != nullptr);
    ptr->ID = table->GetRowCell("ID", rowIndex);
    ptr->Total = parseTo<int32_t>(table->GetRowCell("Total", rowIndex));
    ptr->Time = parseTo<int32_t>(table->GetRowCell("Time", rowIndex));
    ptr->Repeat = table->GetRowCell("Repeat", rowIndex);
    for (int col = 0; col < table->GetColumnCount(); col++) {
        const string& name = fmt::format("GoodsID[{}]", col);
        if (!table->HasColumn(name)) {
            break;
        }
        auto elem = table->GetRowCell(name, rowIndex);
        ptr->GoodsIDs.push_back(elem);
    }
    for (int col = 0; col < table->GetColumnCount(); col++) {
        const string& name = fmt::format("Num[{}]", col);
        if (!table->HasColumn(name)) {
            break;
        }
        auto elem = parseTo<int64_t>(table->GetRowCell(name, rowIndex));
        ptr->Nums.push_back(elem);
    }
    for (int col = 0; col < table->GetColumnCount(); col++) {
        const string& name = fmt::format("Probability[{}]", col);
        if (!table->HasColumn(name)) {
            break;
        }
        auto elem = parseTo<int32_t>(table->GetRowCell(name, rowIndex));
        ptr->Probabilitys.push_back(elem);
    }
    return 0;
}

int NewbieGuide::ParseRow(const IDataFrame* table, int rowIndex, NewbieGuide* ptr) {
    ASSERT(ptr != nullptr);
    ptr->Name = table->GetRowCell("Name", rowIndex);
    ptr->Desc = table->GetRowCell("Desc", rowIndex);
    ptr->Category = parseTo<int32_t>(table->GetRowCell("Category", rowIndex));
    ptr->Target = table->GetRowCell("Target", rowIndex);
    ptr->Accomplishment = parseArray<int>(table->GetRowCell("Accomplishment", rowIndex), TabDelim1);
    ptr->RewardGoods = parseMap<string,int>(table->GetRowCell("RewardGoods", rowIndex), TabDelim1, TabDelim2);
    return 0;
}

int SoldierDefine::ParseRow(const IDataFrame* table, int rowIndex, SoldierDefine* ptr) {
    ASSERT(ptr != nullptr);
    ptr->ID = parseTo<int32_t>(table->GetRowCell("ID", rowIndex));
    ptr->Name = table->GetRowCell("Name", rowIndex);
    ptr->Level = parseTo<int32_t>(table->GetRowCell("Level", rowIndex));
    ptr->BuildingName = table->GetRowCell("BuildingName", rowIndex);
    ptr->BuildingLevel = parseTo<int32_t>(table->GetRowCell("BuildingLevel", rowIndex));
    ptr->RequireSpace = parseTo<int32_t>(table->GetRowCell("RequireSpace", rowIndex));
    ptr->Volume = parseTo<int32_t>(table->GetRowCell("Volume", rowIndex));
    ptr->UpgradeTime = parseTo<int32_t>(table->GetRowCell("UpgradeTime", rowIndex));
    ptr->UpgradeRes = table->GetRowCell("UpgradeRes", rowIndex);
    ptr->UpgradeCost = parseTo<int32_t>(table->GetRowCell("UpgradeCost", rowIndex));
    ptr->ConsumeRes = table->GetRowCell("ConsumeRes", rowIndex);
    ptr->ConsumeCost = parseTo<int32_t>(table->GetRowCell("ConsumeCost", rowIndex));
    ptr->ConsumeTime = parseTo<int32_t>(table->GetRowCell("ConsumeTime", rowIndex));
    ptr->Act = parseTo<int32_t>(table->GetRowCell("Act", rowIndex));
    ptr->Hp = parseTo<int32_t>(table->GetRowCell("Hp", rowIndex));
    ptr->BombLoad = table->GetRowCell("BombLoad", rowIndex);
    ptr->AtkFrequency = parseTo<double>(table->GetRowCell("AtkFrequency", rowIndex));
    ptr->AtkRange = parseTo<double>(table->GetRowCell("AtkRange", rowIndex));
    ptr->MovingSpeed = parseTo<double>(table->GetRowCell("MovingSpeed", rowIndex));
    ptr->EnableBurn = table->GetRowCell("EnableBurn", rowIndex);
    return 0;
}


} // namespace config 
