// This file is auto-generated by Tabugen v1.2.0, DO NOT EDIT!

package config

import (
	"fmt"
	"strings"
)

var _ = fmt.Println
var _ = strings.TrimSpace

// GlobalDefine, generated from GlobalDefine.xlsx
type GlobalDefine struct {
	GoldExchangeTimeFactor1    float32          // 金币兑换时间参数1
	GoldExchangeTimeFactor2    float32          // 金币兑换时间参数2
	GoldExchangeTimeFactor3    float32          // 金币兑换时间参数3
	GoldExchangeResource1Price int32            // 金币兑换资源1价格
	GoldExchangeResource2Price int32            // 金币兑换资源2价格
	GoldExchangeResource3Price int32            // 金币兑换资源3价格
	GoldExchangeResource4Price int32            // 金币兑换资源4价格
	FreeCompleteSeconds        int32            // 免费立即完成时间
	CancelBuildReturnPercent   int32            // 取消建造后返还资源比例
	EnableSearch               bool             // 开启搜索
	SpawnLevelLimit            []int32          // 最大刷新个数显示
	FirstRechargeReward        map[string]int32 // 首充奖励
	VIPItemReward              map[int32]int32  // VIP奖励
}

func (p *GlobalDefine) ParseFrom(table map[string]string) {
	p.GoldExchangeTimeFactor1 = ParseF32(table["GoldExchangeTimeFactor1"])
	p.GoldExchangeTimeFactor2 = ParseF32(table["GoldExchangeTimeFactor2"])
	p.GoldExchangeTimeFactor3 = ParseF32(table["GoldExchangeTimeFactor3"])
	p.GoldExchangeResource1Price = ParseI32(table["GoldExchangeResource1Price"])
	p.GoldExchangeResource2Price = ParseI32(table["GoldExchangeResource2Price"])
	p.GoldExchangeResource3Price = ParseI32(table["GoldExchangeResource3Price"])
	p.GoldExchangeResource4Price = ParseI32(table["GoldExchangeResource4Price"])
	p.FreeCompleteSeconds = ParseI32(table["FreeCompleteSeconds"])
	p.CancelBuildReturnPercent = ParseI32(table["CancelBuildReturnPercent"])
	p.EnableSearch = ParseBool(table["EnableSearch"])
	p.SpawnLevelLimit = ParseSlice(table["SpawnLevelLimit"], ParseI32)
	p.FirstRechargeReward = ParseMap(table["FirstRechargeReward"], strings.TrimSpace, ParseI32)
	p.VIPItemReward = ParseMap(table["VIPItemReward"], ParseI32, ParseI32)
}

// ItemBoxDefine, generated from ItemBox.xlsx
type ItemBoxDefine struct {
	ID           string   // 唯一ID
	Total        int32    // 全部数量
	Time         int32    // 次数
	Repeat       string   // 可重复抽取
	GoodsIDs     []string // 道具ID
	Nums         []int64  // 道具数量
	Probabilitys []int32  // 抽取概率
}

func (p *ItemBoxDefine) ParseRow(table *GDTable, row int) {
	p.ID = strings.TrimSpace(table.GetCell("ID", row))
	p.Total = ParseI32(table.GetCell("Total", row))
	p.Time = ParseI32(table.GetCell("Time", row))
	p.Repeat = strings.TrimSpace(table.GetCell("Repeat", row))
	for col := 0; col < table.ColSize(); col++ {
		var name = fmt.Sprintf("GoodsID[%d]", col)
		if !table.HasColumn(name) {
			break
		}
		var elem = strings.TrimSpace(table.GetCell(name, row))
		p.GoodsIDs = append(p.GoodsIDs, elem)
	}
	for col := 0; col < table.ColSize(); col++ {
		var name = fmt.Sprintf("Num[%d]", col)
		if !table.HasColumn(name) {
			break
		}
		var elem = ParseI64(table.GetCell(name, row))
		p.Nums = append(p.Nums, elem)
	}
	for col := 0; col < table.ColSize(); col++ {
		var name = fmt.Sprintf("Probability[%d]", col)
		if !table.HasColumn(name) {
			break
		}
		var elem = ParseI32(table.GetCell(name, row))
		p.Probabilitys = append(p.Probabilitys, elem)
	}
}

// NewbieGuide, generated from NewbieGuide.xlsx
type NewbieGuide struct {
	Name           string           // 名称
	Desc           string           // 描述
	Category       int32            // 分类
	Target         string           // 引导目标
	Accomplishment []int32          // 需要完成任务
	RewardGoods    map[string]int32 // 任务奖励
}

func (p *NewbieGuide) ParseRow(table *GDTable, row int) {
	p.Name = strings.TrimSpace(table.GetCell("Name", row))
	p.Desc = strings.TrimSpace(table.GetCell("Desc", row))
	p.Category = ParseI32(table.GetCell("Category", row))
	p.Target = strings.TrimSpace(table.GetCell("Target", row))
	p.Accomplishment = ParseSlice(table.GetCell("Accomplishment", row), ParseI32)
	p.RewardGoods = ParseMap(table.GetCell("RewardGoods", row), strings.TrimSpace, ParseI32)
}

// SoldierDefine, generated from Soldier.xlsx
type SoldierDefine struct {
	ID            int32   // 唯一ID
	Name          string  // 兵种名称
	Level         int32   // 等级
	BuildingName  string  // 需要建筑
	BuildingLevel int32   // 建筑等级
	RequireSpace  int32   // 所占空间
	Volume        int32   // 体积
	UpgradeTime   int32   // 升级时间
	UpgradeRes    string  // 升级消耗
	UpgradeCost   int32   // 资源消耗数量
	ConsumeRes    string  // 训练消耗
	ConsumeCost   int32   // 训练消耗数量
	ConsumeTime   int32   // 训练时间
	Act           int32   // 动作
	Hp            int32   // 血量
	BombLoad      string  // 装弹量
	AtkFrequency  float64 // 攻击频率
	AtkRange      float64 // 攻击距离
	MovingSpeed   float64 // 移动速度
	EnableBurn    string  // 开启燃烧
}

func (p *SoldierDefine) ParseRow(table *GDTable, row int) {
	p.ID = ParseI32(table.GetCell("ID", row))
	p.Name = strings.TrimSpace(table.GetCell("Name", row))
	p.Level = ParseI32(table.GetCell("Level", row))
	p.BuildingName = strings.TrimSpace(table.GetCell("BuildingName", row))
	p.BuildingLevel = ParseI32(table.GetCell("BuildingLevel", row))
	p.RequireSpace = ParseI32(table.GetCell("RequireSpace", row))
	p.Volume = ParseI32(table.GetCell("Volume", row))
	p.UpgradeTime = ParseI32(table.GetCell("UpgradeTime", row))
	p.UpgradeRes = strings.TrimSpace(table.GetCell("UpgradeRes", row))
	p.UpgradeCost = ParseI32(table.GetCell("UpgradeCost", row))
	p.ConsumeRes = strings.TrimSpace(table.GetCell("ConsumeRes", row))
	p.ConsumeCost = ParseI32(table.GetCell("ConsumeCost", row))
	p.ConsumeTime = ParseI32(table.GetCell("ConsumeTime", row))
	p.Act = ParseI32(table.GetCell("Act", row))
	p.Hp = ParseI32(table.GetCell("Hp", row))
	p.BombLoad = strings.TrimSpace(table.GetCell("BombLoad", row))
	p.AtkFrequency = ParseF64(table.GetCell("AtkFrequency", row))
	p.AtkRange = ParseF64(table.GetCell("AtkRange", row))
	p.MovingSpeed = ParseF64(table.GetCell("MovingSpeed", row))
	p.EnableBurn = strings.TrimSpace(table.GetCell("EnableBurn", row))
}
